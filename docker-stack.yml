version: '3.8'

# when deploy this file, it has to deploy the stack name as elk, otherwise, elasticsearch cluster cannot form
# docker stack deploy -c docker-stack.yml elk

services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.2
    ports:
      - '6013:9200'
      - '6014:9300'
    configs:
      - source: elastic_config
        target: /usr/share/elasticsearch/config/elasticsearch.yml
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data
    environment:
      ES_JAVA_OPTS: '-Xmx256m -Xms256m'
      ELASTIC_PASSWORD: changeme
      # if possible, please make memory_lock enabled. however, it seems to be not really possible in m
      # bootstrap.memory_lock: 'true'
      # see discussion https://github.com/deviantony/docker-elk/issues/410
      # set a predictable node name, elk is the stack name, elasticsearch is current service name, {{.Task.Slot}} to get current slot number for replica
      node.name: elk_elasticsearch.{{.Task.Slot}}
      # disable single-node discovery
      discovery.type: ''
      # use internal Docker round-robin DNS for unicast discovery, elasticsearch is current service name, tasks.elasticsearch will resolve all hosts ip that running elasticsearch service in docker swarm
      discovery.seed_hosts: tasks.elasticsearch
      # define initial masters, assuming a cluster size of at least 3, this is going to match with node.name
      cluster.initial_master_nodes: elk_elasticsearch.1,elk_elasticsearch.2,elk_elasticsearch.3
      # see discussion https://github.com/deviantony/docker-elk/issues/455, this will force dns resolve using network elk, not the default ingress network in docker swarm
      network.publish_host: _eth0_
    networks:
      - elk
    deploy:
      mode: replicated
      replicas: 3
      placement:
        max_replicas_per_node: 1
      restart_policy:
        condition: any

  logstash:
    image: docker.elastic.co/logstash/logstash:7.9.2
    ports:
      - '6015:5000'
      - '6016:9600'
    configs:
      - source: logstash_config
        target: /usr/share/logstash/config/logstash.yml
      - source: logstash_pipeline
        target: /usr/share/logstash/pipeline/logstash.conf
    volumes:
      - kibana:/usr/share/kibana/data
    environment:
      LS_JAVA_OPTS: '-Xmx256m -Xms256m'
    networks:
      - elk
    deploy:
      mode: replicated
      replicas: 1

  kibana:
    image: docker.elastic.co/kibana/kibana:7.9.2
    ports:
      - '6017:5601'
    configs:
      - source: kibana_config
        target: /usr/share/kibana/config/kibana.yml
    networks:
      - elk
    deploy:
      mode: replicated
      replicas: 1

configs:
  elastic_config:
    file: ./elasticsearch/config/elasticsearch.yml
  logstash_config:
    file: ./logstash/config/logstash.yml
  logstash_pipeline:
    file: ./logstash/pipeline/logstash.conf
  kibana_config:
    file: ./kibana/config/kibana.yml

volumes:
  elasticsearch:
    driver: local
  kibana:
    driver: local

networks:
  elk:
    driver: overlay
